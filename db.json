{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2024-12-1-Java_features.md","hash":"00029872a790e354a6c7074813976b58793b9bba","modified":1733066166064},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1732806531017},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1732806530987},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1732806531019},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1732806531020},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1732806531021},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1732806531022},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1732806531023},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1732806531026},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1732806531027},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1732806531025},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1732806531028},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1732806531030},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1732806531031},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1732806531031},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1732806531033},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1732806531034},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1732806531036},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1732806531037},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1732806531038},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1732806531040},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1732806531035},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1732806531041},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1732806531043},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1732806531044},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1732806531037},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1732806531039},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1732806531045},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1732806531046},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1732806531048},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1732806531047},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1732806531051},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1732806531051},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1732806531052},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1732806530880},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1732806530903},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1732806531049},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1732806530932},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1732806530942},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1732806530934},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1732806530954},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1732806530944},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1732806530974},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1732806530821},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1732806530838},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1732806530853},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1732806530886},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1732806530920},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1732806530937},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1732806530924},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1732806530926},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1732806530929},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1732806530913},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1732806530948},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1732806530783},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1732806530868},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1732806530946},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1732806530899},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1732806530953},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1732806530956},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1732806530986},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1732806531016},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1732806530992},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1732806530994},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1732806530893},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1732806530908},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1732806530940},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1732806530951},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1732806530958},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1732806530917},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1732806530997},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1732806530998},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1732806531001},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1732806531002},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1732806531008},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1732806531011},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1732806531013},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1732806531014},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1732806531015},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1732806531010},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1732806531006},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1732806531005},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1732806530989},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1732717781925},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1732806530759},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1732806530983},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1732806530979},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1732806530971},{"_id":"public/2024/12/01/2024-12-1-Java_features/index.html","hash":"3ac791542dd9e0e5cbcc53540e221fa963e5ad74","modified":1733066180371},{"_id":"public/2024/11/28/hello-world/index.html","hash":"590ef33129dfe1cbb6ce92e2fe1bbd83936b9af4","modified":1733066180371},{"_id":"public/archives/index.html","hash":"c34369e4abcb8d5e040c70db5801f7d36b597439","modified":1733066180371},{"_id":"public/archives/2024/index.html","hash":"e8af3e34688d07486806e0b7d5a6dde187d76e00","modified":1733066180371},{"_id":"public/archives/2024/11/index.html","hash":"855871936fd19f18999f379bccc738d32d671731","modified":1733066180371},{"_id":"public/archives/2024/12/index.html","hash":"308ad1541c588a5fc80196d09d9a1111163d8818","modified":1733066180371},{"_id":"public/index.html","hash":"e32c0a08ffd00c46df5d770c777d5de2255946cf","modified":1733066180371},{"_id":"public/tags/Java/index.html","hash":"35f174af48323428c9ac495be0a6a98d0b1f3d4c","modified":1733066180371},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1733066180371},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1733066180371},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1733066180371},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1733066180371},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1733066180371},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1733066180371}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-11-28T15:09:41.848Z","updated":"2024-11-27T14:29:41.925Z","comments":1,"layout":"post","photos":[],"_id":"cm45quv9n0000msd7gmimg7o9","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Java新特性及函数式编程","author":"Ricky","date":"2024-11-30T16:00:00.000Z","_content":"\n\n## 背景\n\n在当下的这个时间节点，JDK 已更新至[ 23.0.1 版本](https://www.java.com/releases/)，虽然国内的大部分传统企业还在使用 Java8 或更低的版本。但是大多数代码对 Java8 的特性使用的少之又少。\n\n鉴于 Java 语言的 Spring 生态宣布 SpringBoot 框架将最低支持 JDK17，所以了解学习最新的 Java 变动是非常必要的。\n\n再者出于面试的目的，多了解一些 Java 的新特性或者一些新出的技术，也能侧面反应出你对新技术的关注度。\n\n\n### JDK的演变\n\n#### Java8\n\nJDK8是目前使用最多的一个版本，该版本于[十年前](https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2#Java_SE_8)即 2014 年 3 月推出，并在[ 2022 年 3 月停止商用更新](https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2)。\n\n不推荐使用 Java8 的原因也很简单，Java 生态的龙头 Spring 宣布其最受欢迎的框架[ SpringBoot3.0 版本最低支持 Java17](https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0)，且 Spring Boot 2.7 是 2.x 系列中计划的最后一个版本。已将此版本的开源支持延长 6 个月，直至 2023 年 11 月。所以如果想继续使用带有商业支持版本的 SpringBoot 框架，就必须要将对应的 Java 版本升级。\n\n#### Java17\n\nJDK 17 在 2021 年 9 月 14 号正式发布，且 JDK 17 是一个长期维护的版本（LTS)，商业版维护至 2027 年10 月。SpingFramework 6 和SpringBoot 3中默认将使用JDK 17，所以JDK 17必将是使用较广泛的版本; \n\n## 相关特性\n\n### Java8\n\n#### 函数式编程(lambda表达式)\n\nJava8 的特性是面试过程中最常被问到的问题。函数式编程也是绕不开的话题。函数式编程的方式也大大简化了代码。\n\n```java\n// 常用的 lambda 写法\nlist.forEach(System.out::println);\nlists.stream().filter(f -> f.getName().equals(\"p1\"));\n// 通过 map 获取属性集合\nList<BaseQuery> list = new ArrayList<>();\nList<String> collect = list.stream().map(BaseQuery::code).toList();\n// count, min, max, peek...\n```\n\n#### FunctionalInterface\n\n“函数式接口”是指仅仅只包含一个抽象方法的接口。通常在业务编程中可以用来简化实现代码。\n\n### Java17\n\n#### Record类型\n\n> Records 最早在 Java 14 中作为预览特性引入，在 Java 15 中还是预览特性，在Java 16中成为正式版。\n\nRecord 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。\n\nRecord 类型在开发当中最常用的就是代替原有使用 `lombok` 注解的实体类，比如一个可以将 `BaseQueryClazz` 改成 `BaseQuery`，代码更简洁且不需要第三方的 `lombok`插件。\n\n```java\n@Data\npublic class BaseQueryClazz {\n    private String name;\n    private String code;\n}\n```\n\n```java\npublic record BaseQuery(\n        String name,\n        String code\n) {\n}\n```\n\n### Java21\n\n#### 虚拟线程\n\nJDK21 在 9 月 19 号正式发布，带来了较多亮点，其中虚拟线程备受瞩目，毫不夸张的说，它改变了高吞吐代码的编写方式，只需要小小的变动就可以让目前的 IO 密集型程序的吞吐量得到提升，写出高吞吐量的代码不再困难。\n\nJDK21 提供了与 Thread 完全一致的抽象 Virtual Thread 来应对这种经常阻塞的情况，阻塞仍然是会阻塞，但是换了阻塞的对象，由昂贵的平台线程阻塞改为了成本很低的虚拟线程的阻塞，当代码调用到阻塞 API 例如 IO，同步，Sleep 等操作时，JVM 会自动把 **Virtual Thread 从平台线程上卸载**，平台线程就会去处理下一个虚拟线程，通过这种方式，提升了平台线程的利用率，让平台线程不再阻塞在等待上，**从底层实现了少量平台线程就可以处理大量请求，提高了服务吞吐和 CPU 的利用率。**\n\n##### 虚拟线程创建\n\n**方法一：直接创建虚拟线程**\n\n```java\nThread vt = Thread.startVirtualThread(() -> {\n    System.out.println(\"hello wolrd virtual thread\");\n});\n```\n\n**方法二：创建虚拟线程但不自动运行，手动调用start()开始运行**\n\n```java\nThread.ofVirtual().unstarted(() -> {\n    System.out.println(\"hello wolrd virtual thread\");\n});\nvt.start();\n```\n\n**方法三：通过虚拟线程的 ThreadFactory 创建虚拟线程**\n\n```java\nThreadFactory tf = Thread.ofVirtual().factory();\nThread vt = tf.newThread(() -> {\n    System.out.println(\"Start virtual thread...\");\n    Thread.sleep(1000);\n    System.out.println(\"End virtual thread. \");\n});\nvt.start();\n```\n\n**方法四：Executors.newVirtualThreadPer** **-TaskExecutor()**\n\n```java\nExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\nexecutor.submit(() -> {\n    System.out.println(\"Start virtual thread...\");\n    Thread.sleep(1000);\n    System.out.println(\"End virtual thread.\");\n    return true;\n});\n```\n\n关于更多虚拟线程的信息可参考得物技术的[虚拟线程原理及性能分析](https://tech.dewu.com/article?id=89)\n\n## 相关引用材料\n\n- [Java release](https://www.java.com/releases/)\n- [Oracle 官网的 JDK 版本](https://www.oracle.com/java/technologies/downloads/)\n- [Preparing for Spring Boot 3.0](https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0)\n- [Java 8 - 函数编程(lambda表达式)](https://pdai.tech/md/java/java8/java8-stream.html)\n- [虚拟线程原理及性能分析](https://tech.dewu.com/article?id=89)\n","source":"_posts/2024-12-1-Java_features.md","raw":"---\ntitle: Java新特性及函数式编程\nauthor: Ricky\ndate: 2024-12-01\ntags:\n  - Java\n---\n\n\n## 背景\n\n在当下的这个时间节点，JDK 已更新至[ 23.0.1 版本](https://www.java.com/releases/)，虽然国内的大部分传统企业还在使用 Java8 或更低的版本。但是大多数代码对 Java8 的特性使用的少之又少。\n\n鉴于 Java 语言的 Spring 生态宣布 SpringBoot 框架将最低支持 JDK17，所以了解学习最新的 Java 变动是非常必要的。\n\n再者出于面试的目的，多了解一些 Java 的新特性或者一些新出的技术，也能侧面反应出你对新技术的关注度。\n\n\n### JDK的演变\n\n#### Java8\n\nJDK8是目前使用最多的一个版本，该版本于[十年前](https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2#Java_SE_8)即 2014 年 3 月推出，并在[ 2022 年 3 月停止商用更新](https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2)。\n\n不推荐使用 Java8 的原因也很简单，Java 生态的龙头 Spring 宣布其最受欢迎的框架[ SpringBoot3.0 版本最低支持 Java17](https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0)，且 Spring Boot 2.7 是 2.x 系列中计划的最后一个版本。已将此版本的开源支持延长 6 个月，直至 2023 年 11 月。所以如果想继续使用带有商业支持版本的 SpringBoot 框架，就必须要将对应的 Java 版本升级。\n\n#### Java17\n\nJDK 17 在 2021 年 9 月 14 号正式发布，且 JDK 17 是一个长期维护的版本（LTS)，商业版维护至 2027 年10 月。SpingFramework 6 和SpringBoot 3中默认将使用JDK 17，所以JDK 17必将是使用较广泛的版本; \n\n## 相关特性\n\n### Java8\n\n#### 函数式编程(lambda表达式)\n\nJava8 的特性是面试过程中最常被问到的问题。函数式编程也是绕不开的话题。函数式编程的方式也大大简化了代码。\n\n```java\n// 常用的 lambda 写法\nlist.forEach(System.out::println);\nlists.stream().filter(f -> f.getName().equals(\"p1\"));\n// 通过 map 获取属性集合\nList<BaseQuery> list = new ArrayList<>();\nList<String> collect = list.stream().map(BaseQuery::code).toList();\n// count, min, max, peek...\n```\n\n#### FunctionalInterface\n\n“函数式接口”是指仅仅只包含一个抽象方法的接口。通常在业务编程中可以用来简化实现代码。\n\n### Java17\n\n#### Record类型\n\n> Records 最早在 Java 14 中作为预览特性引入，在 Java 15 中还是预览特性，在Java 16中成为正式版。\n\nRecord 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。\n\nRecord 类型在开发当中最常用的就是代替原有使用 `lombok` 注解的实体类，比如一个可以将 `BaseQueryClazz` 改成 `BaseQuery`，代码更简洁且不需要第三方的 `lombok`插件。\n\n```java\n@Data\npublic class BaseQueryClazz {\n    private String name;\n    private String code;\n}\n```\n\n```java\npublic record BaseQuery(\n        String name,\n        String code\n) {\n}\n```\n\n### Java21\n\n#### 虚拟线程\n\nJDK21 在 9 月 19 号正式发布，带来了较多亮点，其中虚拟线程备受瞩目，毫不夸张的说，它改变了高吞吐代码的编写方式，只需要小小的变动就可以让目前的 IO 密集型程序的吞吐量得到提升，写出高吞吐量的代码不再困难。\n\nJDK21 提供了与 Thread 完全一致的抽象 Virtual Thread 来应对这种经常阻塞的情况，阻塞仍然是会阻塞，但是换了阻塞的对象，由昂贵的平台线程阻塞改为了成本很低的虚拟线程的阻塞，当代码调用到阻塞 API 例如 IO，同步，Sleep 等操作时，JVM 会自动把 **Virtual Thread 从平台线程上卸载**，平台线程就会去处理下一个虚拟线程，通过这种方式，提升了平台线程的利用率，让平台线程不再阻塞在等待上，**从底层实现了少量平台线程就可以处理大量请求，提高了服务吞吐和 CPU 的利用率。**\n\n##### 虚拟线程创建\n\n**方法一：直接创建虚拟线程**\n\n```java\nThread vt = Thread.startVirtualThread(() -> {\n    System.out.println(\"hello wolrd virtual thread\");\n});\n```\n\n**方法二：创建虚拟线程但不自动运行，手动调用start()开始运行**\n\n```java\nThread.ofVirtual().unstarted(() -> {\n    System.out.println(\"hello wolrd virtual thread\");\n});\nvt.start();\n```\n\n**方法三：通过虚拟线程的 ThreadFactory 创建虚拟线程**\n\n```java\nThreadFactory tf = Thread.ofVirtual().factory();\nThread vt = tf.newThread(() -> {\n    System.out.println(\"Start virtual thread...\");\n    Thread.sleep(1000);\n    System.out.println(\"End virtual thread. \");\n});\nvt.start();\n```\n\n**方法四：Executors.newVirtualThreadPer** **-TaskExecutor()**\n\n```java\nExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\nexecutor.submit(() -> {\n    System.out.println(\"Start virtual thread...\");\n    Thread.sleep(1000);\n    System.out.println(\"End virtual thread.\");\n    return true;\n});\n```\n\n关于更多虚拟线程的信息可参考得物技术的[虚拟线程原理及性能分析](https://tech.dewu.com/article?id=89)\n\n## 相关引用材料\n\n- [Java release](https://www.java.com/releases/)\n- [Oracle 官网的 JDK 版本](https://www.oracle.com/java/technologies/downloads/)\n- [Preparing for Spring Boot 3.0](https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0)\n- [Java 8 - 函数编程(lambda表达式)](https://pdai.tech/md/java/java8/java8-stream.html)\n- [虚拟线程原理及性能分析](https://tech.dewu.com/article?id=89)\n","slug":"2024-12-1-Java_features","published":1,"updated":"2024-12-01T15:16:06.064Z","comments":1,"layout":"post","photos":[],"_id":"cm45quv9p0001msd745w4c5oj","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在当下的这个时间节点，JDK 已更新至<a href=\"https://www.java.com/releases/\"> 23.0.1 版本</a>，虽然国内的大部分传统企业还在使用 Java8 或更低的版本。但是大多数代码对 Java8 的特性使用的少之又少。</p>\n<p>鉴于 Java 语言的 Spring 生态宣布 SpringBoot 框架将最低支持 JDK17，所以了解学习最新的 Java 变动是非常必要的。</p>\n<p>再者出于面试的目的，多了解一些 Java 的新特性或者一些新出的技术，也能侧面反应出你对新技术的关注度。</p>\n<h3 id=\"JDK的演变\"><a href=\"#JDK的演变\" class=\"headerlink\" title=\"JDK的演变\"></a>JDK的演变</h3><h4 id=\"Java8\"><a href=\"#Java8\" class=\"headerlink\" title=\"Java8\"></a>Java8</h4><p>JDK8是目前使用最多的一个版本，该版本于<a href=\"https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2#Java_SE_8\">十年前</a>即 2014 年 3 月推出，并在<a href=\"https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2\"> 2022 年 3 月停止商用更新</a>。</p>\n<p>不推荐使用 Java8 的原因也很简单，Java 生态的龙头 Spring 宣布其最受欢迎的框架<a href=\"https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0\"> SpringBoot3.0 版本最低支持 Java17</a>，且 Spring Boot 2.7 是 2.x 系列中计划的最后一个版本。已将此版本的开源支持延长 6 个月，直至 2023 年 11 月。所以如果想继续使用带有商业支持版本的 SpringBoot 框架，就必须要将对应的 Java 版本升级。</p>\n<h4 id=\"Java17\"><a href=\"#Java17\" class=\"headerlink\" title=\"Java17\"></a>Java17</h4><p>JDK 17 在 2021 年 9 月 14 号正式发布，且 JDK 17 是一个长期维护的版本（LTS)，商业版维护至 2027 年10 月。SpingFramework 6 和SpringBoot 3中默认将使用JDK 17，所以JDK 17必将是使用较广泛的版本; </p>\n<h2 id=\"相关特性\"><a href=\"#相关特性\" class=\"headerlink\" title=\"相关特性\"></a>相关特性</h2><h3 id=\"Java8-1\"><a href=\"#Java8-1\" class=\"headerlink\" title=\"Java8\"></a>Java8</h3><h4 id=\"函数式编程-lambda表达式\"><a href=\"#函数式编程-lambda表达式\" class=\"headerlink\" title=\"函数式编程(lambda表达式)\"></a>函数式编程(lambda表达式)</h4><p>Java8 的特性是面试过程中最常被问到的问题。函数式编程也是绕不开的话题。函数式编程的方式也大大简化了代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用的 lambda 写法</span></span><br><span class=\"line\">list.forEach(System.out::println);</span><br><span class=\"line\">lists.stream().filter(f -&gt; f.getName().equals(<span class=\"string\">&quot;p1&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 通过 map 获取属性集合</span></span><br><span class=\"line\">List&lt;BaseQuery&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;String&gt; collect = list.stream().map(BaseQuery::code).toList();</span><br><span class=\"line\"><span class=\"comment\">// count, min, max, peek...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"FunctionalInterface\"></a>FunctionalInterface</h4><p>“函数式接口”是指仅仅只包含一个抽象方法的接口。通常在业务编程中可以用来简化实现代码。</p>\n<h3 id=\"Java17-1\"><a href=\"#Java17-1\" class=\"headerlink\" title=\"Java17\"></a>Java17</h3><h4 id=\"Record类型\"><a href=\"#Record类型\" class=\"headerlink\" title=\"Record类型\"></a>Record类型</h4><blockquote>\n<p>Records 最早在 Java 14 中作为预览特性引入，在 Java 15 中还是预览特性，在Java 16中成为正式版。</p>\n</blockquote>\n<p>Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</p>\n<p>Record 类型在开发当中最常用的就是代替原有使用 <code>lombok</code> 注解的实体类，比如一个可以将 <code>BaseQueryClazz</code> 改成 <code>BaseQuery</code>，代码更简洁且不需要第三方的 <code>lombok</code>插件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseQueryClazz</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">BaseQuery</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        String name,</span></span><br><span class=\"line\"><span class=\"params\">        String code</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java21\"><a href=\"#Java21\" class=\"headerlink\" title=\"Java21\"></a>Java21</h3><h4 id=\"虚拟线程\"><a href=\"#虚拟线程\" class=\"headerlink\" title=\"虚拟线程\"></a>虚拟线程</h4><p>JDK21 在 9 月 19 号正式发布，带来了较多亮点，其中虚拟线程备受瞩目，毫不夸张的说，它改变了高吞吐代码的编写方式，只需要小小的变动就可以让目前的 IO 密集型程序的吞吐量得到提升，写出高吞吐量的代码不再困难。</p>\n<p>JDK21 提供了与 Thread 完全一致的抽象 Virtual Thread 来应对这种经常阻塞的情况，阻塞仍然是会阻塞，但是换了阻塞的对象，由昂贵的平台线程阻塞改为了成本很低的虚拟线程的阻塞，当代码调用到阻塞 API 例如 IO，同步，Sleep 等操作时，JVM 会自动把 <strong>Virtual Thread 从平台线程上卸载</strong>，平台线程就会去处理下一个虚拟线程，通过这种方式，提升了平台线程的利用率，让平台线程不再阻塞在等待上，<strong>从底层实现了少量平台线程就可以处理大量请求，提高了服务吞吐和 CPU 的利用率。</strong></p>\n<h5 id=\"虚拟线程创建\"><a href=\"#虚拟线程创建\" class=\"headerlink\" title=\"虚拟线程创建\"></a>虚拟线程创建</h5><p><strong>方法一：直接创建虚拟线程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">vt</span> <span class=\"operator\">=</span> Thread.startVirtualThread(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello wolrd virtual thread&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法二：创建虚拟线程但不自动运行，手动调用start()开始运行</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread.ofVirtual().unstarted(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello wolrd virtual thread&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">vt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法三：通过虚拟线程的 ThreadFactory 创建虚拟线程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">tf</span> <span class=\"operator\">=</span> Thread.ofVirtual().factory();</span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">vt</span> <span class=\"operator\">=</span> tf.newThread(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Start virtual thread...&quot;</span>);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;End virtual thread. &quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">vt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法四：Executors.newVirtualThreadPer</strong> <strong>-TaskExecutor()</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class=\"line\">executor.submit(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Start virtual thread...&quot;</span>);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;End virtual thread.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>关于更多虚拟线程的信息可参考得物技术的<a href=\"https://tech.dewu.com/article?id=89\">虚拟线程原理及性能分析</a></p>\n<h2 id=\"相关引用材料\"><a href=\"#相关引用材料\" class=\"headerlink\" title=\"相关引用材料\"></a>相关引用材料</h2><ul>\n<li><a href=\"https://www.java.com/releases/\">Java release</a></li>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/\">Oracle 官网的 JDK 版本</a></li>\n<li><a href=\"https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0\">Preparing for Spring Boot 3.0</a></li>\n<li><a href=\"https://pdai.tech/md/java/java8/java8-stream.html\">Java 8 - 函数编程(lambda表达式)</a></li>\n<li><a href=\"https://tech.dewu.com/article?id=89\">虚拟线程原理及性能分析</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在当下的这个时间节点，JDK 已更新至<a href=\"https://www.java.com/releases/\"> 23.0.1 版本</a>，虽然国内的大部分传统企业还在使用 Java8 或更低的版本。但是大多数代码对 Java8 的特性使用的少之又少。</p>\n<p>鉴于 Java 语言的 Spring 生态宣布 SpringBoot 框架将最低支持 JDK17，所以了解学习最新的 Java 变动是非常必要的。</p>\n<p>再者出于面试的目的，多了解一些 Java 的新特性或者一些新出的技术，也能侧面反应出你对新技术的关注度。</p>\n<h3 id=\"JDK的演变\"><a href=\"#JDK的演变\" class=\"headerlink\" title=\"JDK的演变\"></a>JDK的演变</h3><h4 id=\"Java8\"><a href=\"#Java8\" class=\"headerlink\" title=\"Java8\"></a>Java8</h4><p>JDK8是目前使用最多的一个版本，该版本于<a href=\"https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2#Java_SE_8\">十年前</a>即 2014 年 3 月推出，并在<a href=\"https://zh.wikipedia.org/wiki/Java%E7%89%88%E6%9C%AC%E6%AD%B7%E5%8F%B2\"> 2022 年 3 月停止商用更新</a>。</p>\n<p>不推荐使用 Java8 的原因也很简单，Java 生态的龙头 Spring 宣布其最受欢迎的框架<a href=\"https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0\"> SpringBoot3.0 版本最低支持 Java17</a>，且 Spring Boot 2.7 是 2.x 系列中计划的最后一个版本。已将此版本的开源支持延长 6 个月，直至 2023 年 11 月。所以如果想继续使用带有商业支持版本的 SpringBoot 框架，就必须要将对应的 Java 版本升级。</p>\n<h4 id=\"Java17\"><a href=\"#Java17\" class=\"headerlink\" title=\"Java17\"></a>Java17</h4><p>JDK 17 在 2021 年 9 月 14 号正式发布，且 JDK 17 是一个长期维护的版本（LTS)，商业版维护至 2027 年10 月。SpingFramework 6 和SpringBoot 3中默认将使用JDK 17，所以JDK 17必将是使用较广泛的版本; </p>\n<h2 id=\"相关特性\"><a href=\"#相关特性\" class=\"headerlink\" title=\"相关特性\"></a>相关特性</h2><h3 id=\"Java8-1\"><a href=\"#Java8-1\" class=\"headerlink\" title=\"Java8\"></a>Java8</h3><h4 id=\"函数式编程-lambda表达式\"><a href=\"#函数式编程-lambda表达式\" class=\"headerlink\" title=\"函数式编程(lambda表达式)\"></a>函数式编程(lambda表达式)</h4><p>Java8 的特性是面试过程中最常被问到的问题。函数式编程也是绕不开的话题。函数式编程的方式也大大简化了代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用的 lambda 写法</span></span><br><span class=\"line\">list.forEach(System.out::println);</span><br><span class=\"line\">lists.stream().filter(f -&gt; f.getName().equals(<span class=\"string\">&quot;p1&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 通过 map 获取属性集合</span></span><br><span class=\"line\">List&lt;BaseQuery&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">List&lt;String&gt; collect = list.stream().map(BaseQuery::code).toList();</span><br><span class=\"line\"><span class=\"comment\">// count, min, max, peek...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"FunctionalInterface\"><a href=\"#FunctionalInterface\" class=\"headerlink\" title=\"FunctionalInterface\"></a>FunctionalInterface</h4><p>“函数式接口”是指仅仅只包含一个抽象方法的接口。通常在业务编程中可以用来简化实现代码。</p>\n<h3 id=\"Java17-1\"><a href=\"#Java17-1\" class=\"headerlink\" title=\"Java17\"></a>Java17</h3><h4 id=\"Record类型\"><a href=\"#Record类型\" class=\"headerlink\" title=\"Record类型\"></a>Record类型</h4><blockquote>\n<p>Records 最早在 Java 14 中作为预览特性引入，在 Java 15 中还是预览特性，在Java 16中成为正式版。</p>\n</blockquote>\n<p>Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</p>\n<p>Record 类型在开发当中最常用的就是代替原有使用 <code>lombok</code> 注解的实体类，比如一个可以将 <code>BaseQueryClazz</code> 改成 <code>BaseQuery</code>，代码更简洁且不需要第三方的 <code>lombok</code>插件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseQueryClazz</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String code;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title class_\">BaseQuery</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        String name,</span></span><br><span class=\"line\"><span class=\"params\">        String code</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java21\"><a href=\"#Java21\" class=\"headerlink\" title=\"Java21\"></a>Java21</h3><h4 id=\"虚拟线程\"><a href=\"#虚拟线程\" class=\"headerlink\" title=\"虚拟线程\"></a>虚拟线程</h4><p>JDK21 在 9 月 19 号正式发布，带来了较多亮点，其中虚拟线程备受瞩目，毫不夸张的说，它改变了高吞吐代码的编写方式，只需要小小的变动就可以让目前的 IO 密集型程序的吞吐量得到提升，写出高吞吐量的代码不再困难。</p>\n<p>JDK21 提供了与 Thread 完全一致的抽象 Virtual Thread 来应对这种经常阻塞的情况，阻塞仍然是会阻塞，但是换了阻塞的对象，由昂贵的平台线程阻塞改为了成本很低的虚拟线程的阻塞，当代码调用到阻塞 API 例如 IO，同步，Sleep 等操作时，JVM 会自动把 <strong>Virtual Thread 从平台线程上卸载</strong>，平台线程就会去处理下一个虚拟线程，通过这种方式，提升了平台线程的利用率，让平台线程不再阻塞在等待上，<strong>从底层实现了少量平台线程就可以处理大量请求，提高了服务吞吐和 CPU 的利用率。</strong></p>\n<h5 id=\"虚拟线程创建\"><a href=\"#虚拟线程创建\" class=\"headerlink\" title=\"虚拟线程创建\"></a>虚拟线程创建</h5><p><strong>方法一：直接创建虚拟线程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">vt</span> <span class=\"operator\">=</span> Thread.startVirtualThread(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello wolrd virtual thread&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法二：创建虚拟线程但不自动运行，手动调用start()开始运行</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread.ofVirtual().unstarted(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello wolrd virtual thread&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">vt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法三：通过虚拟线程的 ThreadFactory 创建虚拟线程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">tf</span> <span class=\"operator\">=</span> Thread.ofVirtual().factory();</span><br><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">vt</span> <span class=\"operator\">=</span> tf.newThread(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Start virtual thread...&quot;</span>);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;End virtual thread. &quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">vt.start();</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法四：Executors.newVirtualThreadPer</strong> <strong>-TaskExecutor()</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ExecutorService</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> Executors.newVirtualThreadPerTaskExecutor();</span><br><span class=\"line\">executor.submit(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Start virtual thread...&quot;</span>);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;End virtual thread.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>关于更多虚拟线程的信息可参考得物技术的<a href=\"https://tech.dewu.com/article?id=89\">虚拟线程原理及性能分析</a></p>\n<h2 id=\"相关引用材料\"><a href=\"#相关引用材料\" class=\"headerlink\" title=\"相关引用材料\"></a>相关引用材料</h2><ul>\n<li><a href=\"https://www.java.com/releases/\">Java release</a></li>\n<li><a href=\"https://www.oracle.com/java/technologies/downloads/\">Oracle 官网的 JDK 版本</a></li>\n<li><a href=\"https://spring.io/blog/2022/05/24/preparing-for-spring-boot-3-0\">Preparing for Spring Boot 3.0</a></li>\n<li><a href=\"https://pdai.tech/md/java/java8/java8-stream.html\">Java 8 - 函数编程(lambda表达式)</a></li>\n<li><a href=\"https://tech.dewu.com/article?id=89\">虚拟线程原理及性能分析</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm45quv9p0001msd745w4c5oj","tag_id":"cm45quv9q0002msd7gzm2eg9o","_id":"cm45quv9r0003msd75a0x96qj"}],"Tag":[{"name":"Java","_id":"cm45quv9q0002msd7gzm2eg9o"}]}}